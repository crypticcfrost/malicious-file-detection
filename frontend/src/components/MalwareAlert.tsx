import React, { useEffect, useState, useRef } from "react";
import { io, Socket } from "socket.io-client";

// (Optional) Put your server URL in an .env file and reference via Vite
const SERVER_URL = "http://localhost:5000";
const socket: Socket = io(SERVER_URL, {
  withCredentials: true,
  transports: ['websocket', 'polling']
});

interface LogEntry {
  timestamp: string;
  message: string;
  type: 'info' | 'warning' | 'error';
}

interface SystemStats {
  cpuUsage: number;
  memoryUsage: number;
  filesScanned: number;
  threatsDetected: number;
}

interface Settings {
  scanInterval: number;
  autoQuarantine: boolean;
  notificationsEnabled: boolean;
  scanDepth: 'quick' | 'moderate' | 'deep';
}

const MalwareAlert: React.FC = () => {
  const [message, setMessage] = useState<string>("Checking files...");
  const [isMalware, setIsMalware] = useState<boolean>(false);
  const [detectedFile, setDetectedFile] = useState<string | null>(null);
  const [action, setAction] = useState<"quarantine" | "keep" | null>(null);
  const [connected, setConnected] = useState<boolean>(false);
  const [logs, setLogs] = useState<LogEntry[]>([]);
  const [showSettings, setShowSettings] = useState<boolean>(false);
  const [showStatusMenu, setShowStatusMenu] = useState<boolean>(false);
  const [showLogsMenu, setShowLogsMenu] = useState<boolean>(false);
  const [isLogsPaused, setIsLogsPaused] = useState<boolean>(false);
  const [settings, setSettings] = useState<Settings>({
    scanInterval: 5,
    autoQuarantine: false,
    notificationsEnabled: true,
    scanDepth: 'moderate'
  });
  const [stats, setStats] = useState<SystemStats>({
    cpuUsage: 0,
    memoryUsage: 0,
    filesScanned: 0,
    threatsDetected: 0,
  });

  const statusMenuRef = useRef<HTMLDivElement>(null);
  const logsMenuRef = useRef<HTMLDivElement>(null);

  const addLog = (message: string, type: 'info' | 'warning' | 'error' = 'info') => {
    const newLog: LogEntry = {
      timestamp: new Date().toLocaleTimeString(),
      message,
      type,
    };
    setLogs(prev => [newLog, ...prev].slice(0, 50)); // Keep last 50 logs
  };

  useEffect(() => {
    console.log("Setting up socket listeners...");

    // Verify connection
    socket.on("connect", () => {
      console.log("Connected to socket server");
      setConnected(true);
      addLog("Connected to monitoring server", 'info');
    });

    socket.on("disconnect", () => {
      console.log("Disconnected from socket server");
      setConnected(false);
      addLog("Disconnected from monitoring server", 'error');
    });

    socket.on("connect_error", (error) => {
      console.error("Socket connection error:", error);
      setMessage("Connection error. Please check if server is running.");
      setConnected(false);
      addLog("Connection error. Please check if server is running.", 'error');
    });

    socket.on("malware-alert", (msg: string) => {
      console.log("Received malware-alert event:", msg);
      setDetectedFile(msg);
      setMessage("Malware detected!");
      setIsMalware(true);
      addLog(`Malware detected: ${msg}`, 'error');

      // Auto-quarantine if enabled
      if (settings.autoQuarantine) {
        handleQuarantine(msg);
      }
    });

    socket.on("log", (msg: string) => {
      console.log("Received log event:", msg);
      setMessage(msg);
      setIsMalware(false);
      setDetectedFile(null);
      addLog(msg);
    });

    // Cleanup socket listeners when component unmounts
    return () => {
      console.log("Cleaning up socket listeners...");
      socket.off("connect");
      socket.off("disconnect");
      socket.off("connect_error");
      socket.off("malware-alert");
      socket.off("log");
    };
  }, [settings.autoQuarantine]); // Add settings.autoQuarantine to dependency array

  // Simulate updating stats
  useEffect(() => {
    const interval = setInterval(() => {
      setStats(prev => ({
        cpuUsage: Math.min(100, Math.max(0, prev.cpuUsage + (Math.random() * 10 - 5))),
        memoryUsage: Math.min(100, Math.max(0, prev.memoryUsage + (Math.random() * 10 - 5))),
        filesScanned: prev.filesScanned + Math.floor(Math.random() * 5),
        threatsDetected: prev.threatsDetected
      }));
    }, 2000);

    return () => clearInterval(interval);
  }, []);

  // Add click outside handler for dropdowns
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (statusMenuRef.current && !statusMenuRef.current.contains(event.target as Node)) {
        setShowStatusMenu(false);
      }
      if (logsMenuRef.current && !logsMenuRef.current.contains(event.target as Node)) {
        setShowLogsMenu(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  const handleQuarantine = async (filePath: string) => {
    try {
      // Send quarantine request to server
      socket.emit('quarantine-file', filePath);
      addLog(`File quarantined: ${filePath}`, 'warning');
      
      // Update UI
      setMessage("File quarantined successfully");
      setIsMalware(false);
      setDetectedFile(null);
      setAction("quarantine");
      
      // Update threat count
      setStats(prev => ({
        ...prev,
        threatsDetected: prev.threatsDetected + 1
      }));

      // Reset after delay
      setTimeout(() => {
        setMessage("Checking files...");
        setAction(null);
      }, 2000);
    } catch (error) {
      console.error('Error quarantining file:', error);
      addLog(`Error quarantining file: ${error}`, 'error');
    }
  };

  const handleAction = (action: "quarantine" | "keep") => {
    console.log(`Handling action: ${action}`);
    
    if (action === "quarantine" && detectedFile) {
      handleQuarantine(detectedFile);
    } else if (action === "keep") {
      addLog(`User chose to keep file: ${detectedFile}`, 'warning');
      setMessage("Checking files...");
      setAction(null);
      setIsMalware(false);
      setDetectedFile(null);
    }
  };

  const handleSettingsChange = (setting: keyof Settings, value: any) => {
    setSettings(prev => ({
      ...prev,
      [setting]: value
    }));
    addLog(`Settings updated: ${setting} set to ${value}`, 'info');
  };

  const clearLogs = () => {
    setLogs([]);
    addLog('Logs cleared', 'info');
  };

  const exportLogs = () => {
    const logsText = logs.map(log => `[${log.timestamp}] ${log.type.toUpperCase()}: ${log.message}`).join('\n');
    const blob = new Blob([logsText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `malware_detection_logs_${new Date().toISOString()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    addLog('Logs exported', 'info');
  };

  const toggleScan = () => {
    if (message === "Checking files...") {
      setMessage("Scan paused");
      addLog('File scanning paused', 'warning');
    } else {
      setMessage("Checking files...");
      addLog('File scanning resumed', 'info');
    }
  };

  const startDeepScan = () => {
    setMessage("Starting deep system scan...");
    addLog('Initiating deep system scan', 'info');
    // Simulate increased CPU usage during deep scan
    setStats(prev => ({
      ...prev,
      cpuUsage: Math.min(100, prev.cpuUsage + 30)
    }));
  };

  return (
    <div className="bg-gray-900 min-h-screen w-full flex flex-col items-center">
      {/* Header - Modified for centered logo and right-aligned status/settings */}
      <div className="w-full max-w-7xl px-6 pt-6 pb-4">
        <div className="flex items-center justify-between">
          {/* Empty div for spacing */}
          <div className="w-1/4"></div>
          
          {/* Centered logo */}
          <h1 className="cyber-title text-4xl font-bold text-white bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-purple-500 flex-1 text-center">
            Malware Detection System
          </h1>
          
          {/* Right-aligned items */}
          <div className="flex items-center space-x-4 w-1/4 justify-end">
            <div className="flex items-center space-x-2 bg-gray-800/50 backdrop-blur-sm px-4 py-2 rounded-lg">
              <span className={`inline-block w-3 h-3 rounded-full ${connected ? 'bg-green-500 pulse-animation' : 'bg-red-500'}`}></span>
              <span className="text-white">{connected ? 'Connected' : 'Disconnected'}</span>
            </div>
            <button 
              onClick={() => setShowSettings(!showSettings)}
              className="bg-gray-800/50 backdrop-blur-sm px-4 py-2 rounded-lg text-white hover:bg-gray-700/50 transition-all">
              Settings
            </button>
          </div>
        </div>
      </div>

      {/* Settings Modal */}
      {showSettings && (
        <div className="fixed inset-0 bg-black/50 backdrop-blur-sm flex items-center justify-center z-50">
          <div className="bg-gray-800 rounded-xl p-6 w-full max-w-md">
            <div className="flex justify-between items-center mb-4">
              <h2 className="text-xl font-semibold text-white">Settings</h2>
              <button onClick={() => setShowSettings(false)} className="text-gray-400 hover:text-white">
                ✕
              </button>
            </div>
            <div className="space-y-4">
              <div>
                <label className="text-gray-300 block mb-2">Scan Interval (minutes)</label>
                <input
                  type="number"
                  value={settings.scanInterval}
                  onChange={(e) => handleSettingsChange('scanInterval', parseInt(e.target.value))}
                  className="bg-gray-700 text-white rounded px-3 py-2 w-full"
                  min="1"
                  max="60"
                />
              </div>
              <div>
                <label className="text-gray-300 block mb-2">Scan Depth</label>
                <select
                  value={settings.scanDepth}
                  onChange={(e) => handleSettingsChange('scanDepth', e.target.value)}
                  className="bg-gray-700 text-white rounded px-3 py-2 w-full"
                >
                  <option value="quick">Quick</option>
                  <option value="moderate">Moderate</option>
                  <option value="deep">Deep</option>
                </select>
              </div>
              <div className="flex items-center">
                <input
                  type="checkbox"
                  checked={settings.autoQuarantine}
                  onChange={(e) => handleSettingsChange('autoQuarantine', e.target.checked)}
                  className="mr-2"
                />
                <label className="text-gray-300">Auto-quarantine threats</label>
              </div>
              <div className="flex items-center">
                <input
                  type="checkbox"
                  checked={settings.notificationsEnabled}
                  onChange={(e) => handleSettingsChange('notificationsEnabled', e.target.checked)}
                  className="mr-2"
                />
                <label className="text-gray-300">Enable notifications</label>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* Stats Bar */}
      <div className="w-full max-w-5xl px-6 mb-8">
        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
          <div className="bg-gray-800/50 backdrop-blur-sm rounded-lg p-4">
            <div className="text-gray-400 text-sm">CPU Usage</div>
            <div className="text-white text-lg font-semibold">{stats.cpuUsage.toFixed(1)}%</div>
            <div className="w-full bg-gray-700 rounded-full h-1.5 mt-2">
              <div className="bg-blue-500 h-1.5 rounded-full" style={{ width: `${stats.cpuUsage}%` }}></div>
            </div>
          </div>
          <div className="bg-gray-800/50 backdrop-blur-sm rounded-lg p-4">
            <div className="text-gray-400 text-sm">Memory Usage</div>
            <div className="text-white text-lg font-semibold">{stats.memoryUsage.toFixed(1)}%</div>
            <div className="w-full bg-gray-700 rounded-full h-1.5 mt-2">
              <div className="bg-purple-500 h-1.5 rounded-full" style={{ width: `${stats.memoryUsage}%` }}></div>
            </div>
          </div>
          <div className="bg-gray-800/50 backdrop-blur-sm rounded-lg p-4">
            <div className="text-gray-400 text-sm">Files Scanned</div>
            <div className="text-white text-lg font-semibold">{stats.filesScanned.toLocaleString()}</div>
            <div className="text-gray-400 text-xs mt-2">Active Scanning</div>
          </div>
          <div className="bg-gray-800/50 backdrop-blur-sm rounded-lg p-4">
            <div className="text-gray-400 text-sm">Threats Detected</div>
            <div className="text-white text-lg font-semibold">{stats.threatsDetected}</div>
            <div className="text-gray-400 text-xs mt-2">All Clear</div>
          </div>
        </div>
      </div>

      {/* Main content */}
      <div className="w-full max-w-6xl px-6 mb-6">
        {/* Two-column layout */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 w-full h-[calc(100vh-24rem)] max-h-[600px]">
          {/* Status Monitor Panel */}
          <div className={`rounded-xl shadow-lg transition-all duration-300 flex flex-col relative ${
            isMalware 
              ? 'bg-gradient-to-br from-red-900 to-red-700 animate-pulse' 
              : 'bg-gradient-to-br from-purple-900 to-indigo-900'
          }`}>
            <div className="p-6 flex flex-col h-full">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-2xl font-semibold text-white">Status Monitor</h2>
                <div className="flex space-x-2 relative" ref={statusMenuRef}>
                  <button 
                    onClick={() => setShowStatusMenu(!showStatusMenu)}
                    className="text-white/80 hover:text-white transition-colors">
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M4 6h16M4 12h16m-7 6h7" />
                    </svg>
                  </button>

                  {/* Status Menu Dropdown - Repositioned */}
                  {showStatusMenu && (
                    <div className="absolute top-full right-0 mt-2 w-48 bg-gray-800 rounded-lg shadow-lg py-1 z-10">
                      <button
                        onClick={toggleScan}
                        className="block w-full text-left px-4 py-2 text-white hover:bg-gray-700"
                      >
                        {message === "Checking files..." ? "Pause Scan" : "Resume Scan"}
                      </button>
                      <button
                        onClick={startDeepScan}
                        className="block w-full text-left px-4 py-2 text-white hover:bg-gray-700"
                      >
                        Start Deep Scan
                      </button>
                    </div>
                  )}
                </div>
              </div>

              <div className="flex-1 space-y-4">
                <div className="text-xl text-white">{message}</div>
                
                {isMalware && (
                  <div className="bg-red-800/50 p-6 rounded-lg border border-red-500 mt-4">
                    <div className="text-red-200 font-medium">
                      <span className="text-red-400">⚠️ Malicious File Detected: </span>
                      <span className="font-bold text-yellow-300 break-all">{detectedFile}</span>
                    </div>
                    <div className="mt-6 flex space-x-4 justify-center">
                      <button
                        className="bg-red-500 hover:bg-red-600 text-white py-3 px-6 rounded-lg transform transition-all hover:scale-105 flex items-center shadow-lg"
                        onClick={() => handleAction("quarantine")}
                      >
                        <span className="mr-2">🔒</span> Quarantine
                      </button>
                      <button
                        className="bg-yellow-500 hover:bg-yellow-600 text-white py-3 px-6 rounded-lg transform transition-all hover:scale-105 flex items-center shadow-lg"
                        onClick={() => handleAction("keep")}
                      >
                        <span className="mr-2">⚠️</span> Keep
                      </button>
                    </div>
                  </div>
                )}

                {!isMalware && (
                  <div className="flex items-center space-x-3 text-gray-300 bg-gray-800/30 p-6 rounded-lg">
                    <svg
                      className="animate-spin h-6 w-6 text-blue-500"
                      xmlns="http://www.w3.org/2000/svg"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                    >
                      <circle className="opacity-25" cx="12" cy="12" r="10" strokeWidth="4"></circle>
                      <path className="opacity-75" fill="none" strokeWidth="4" d="M4 12a8 8 0 0116 0"></path>
                    </svg>
                    <span>Actively Monitoring System Files...</span>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* System Logs Panel */}
          <div className="bg-gray-800 rounded-xl shadow-lg overflow-hidden flex flex-col">
            <div className="p-6 flex flex-col h-full">
              <div className="flex items-center justify-between mb-4">
                <h2 className="text-2xl font-semibold text-white">System Logs</h2>
                <div className="flex space-x-2 relative" ref={logsMenuRef}>
                  <button 
                    onClick={() => setIsLogsPaused(!isLogsPaused)}
                    className="text-white/80 hover:text-white transition-colors"
                    title={isLogsPaused ? "Resume Logs" : "Pause Logs"}
                  >
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" 
                        d={isLogsPaused ? "M19 9l-7 7-7-7" : "M5 15l7-7 7 7"} />
                    </svg>
                  </button>
                  <button 
                    onClick={() => setShowLogsMenu(!showLogsMenu)}
                    className="text-white/80 hover:text-white transition-colors">
                    <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" 
                        d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z" />
                    </svg>
                  </button>

                  {/* Logs Menu Dropdown - Repositioned */}
                  {showLogsMenu && (
                    <div className="absolute top-full right-0 mt-2 w-48 bg-gray-800 rounded-lg shadow-lg py-1 z-10">
                      <button
                        onClick={clearLogs}
                        className="block w-full text-left px-4 py-2 text-white hover:bg-gray-700"
                      >
                        Clear Logs
                      </button>
                      <button
                        onClick={exportLogs}
                        className="block w-full text-left px-4 py-2 text-white hover:bg-gray-700"
                      >
                        Export Logs
                      </button>
                    </div>
                  )}
                </div>
              </div>

              <div className="flex-1 overflow-y-auto space-y-2 custom-scrollbar">
                {!isLogsPaused && logs.map((log, index) => (
                  <div
                    key={index}
                    className={`p-3 rounded-lg transition-all duration-200 hover:translate-x-1 ${
                      log.type === 'error' 
                        ? 'bg-red-900/30 border-l-4 border-red-500' 
                        : log.type === 'warning'
                        ? 'bg-yellow-900/30 border-l-4 border-yellow-500'
                        : 'bg-blue-900/30 border-l-4 border-blue-500'
                    }`}
                  >
                    <div className="flex items-center">
                      <span className="text-gray-400 text-sm font-mono">{log.timestamp}</span>
                      <span className="mx-2 text-gray-500">|</span>
                      <span className={`${
                        log.type === 'error' 
                          ? 'text-red-400' 
                          : log.type === 'warning'
                          ? 'text-yellow-400'
                          : 'text-blue-400'
                      }`}>
                        {log.message}
                      </span>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default MalwareAlert;